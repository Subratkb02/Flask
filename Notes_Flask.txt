Web framework for python(wsgi compliant web application framework)
written in python
often referred as a micro framework
flask doesn't have built in abstraction layer for database handling nor does it have form validation support.
Flask supports extensions to add such functionality to the application

flask framework uses Werkzeug as one of its bases.
easy to request and response objects
Unicode support
session and cookie support

2nd base - web templating system Jinja2 (combines a template with a certain data source to render dynamic web pages)

Environment:
    Python 2.6 or higher

    recommendation using virtualenv or virtualenvwrapper (pip install virtualenv)

to write flask :
    import flask class
    flask module
    flask constructors(__name__)
    route() function of Flask class is a decorator which tells the application which URL should call the associated function.

    app.route(rule,options)
        -rule parameter represents URL binding with the function
        -options is a list of parameters to be forwarded to the underlying Rule object

run() method of Flask class runs the application

Routing in Flask:
    -Modern web frameworks use routing tech to help user remembering applications URLs
    -It is useful to access desired page directly without having to navigaet from home page
    -route() decorator in Flask is used to bind URL to a function
    eg: @app.route('/hello')
        def hello_world():
            return 'hello world' {Here Url '/hello' rule is bound to hello_world() function}

Variables Rules:
    possible to build URL dynamically by adding variable parts to rule parameter
    This variable part is marked as <variable-name>.
    It is passed as a keyword argument to the function with which rule is associated
    eg: @app.route('/hello/<name>')
        def hello_name():
            return 'Hello %s! % name'

URL building in flask:
    url_for() function is very useful for dynamically building URL for a specific function
    the function accepts name of function as first arguments, each corresponding to variable part of URL
    it allows you to change URLs in one go, without having to remember to change URLs all over the place
    Url building will handle escaping of special characters and Unicode data transparently for you, so you don't have to deal with them.
    if your application is placed outside the URL, url_for() will handle that properly for you.

HTTP Methods:
    foundation of data communication
    it is the protocol to exchange or transfer hypertext
    defines methods to indicate the desired action to be performed on the identified resource
    HTTP specifications defined GET,POST and HEAD methods
    resource corresponds to a file or the output of an executable residing on the server
    By default Flask route responds to GET requests.(However this preference can be altered by providing methods argument to route() decorator).

    eg: from flask import Flask, request
        app=Flask(__name__)
        @app.route('/function',methods = ['Post','GET'])
        def function():
            if requests.method == 'Post':
                #statement1
                #statement2
                #...
            else:
                #statement1
                #statement2
                #statement3.....


Template with Flask:
    rendering html form to the browser
    whenever to fire a template
    create templates folder>>hello.html>>
    eg: form flask import Flask, render_template
        app=flask(__name__)
        @app.route('/')
        def index():
            return render_template('hello.html') //template hello.html in templates folder
        if(__name__=='__main__':
            app.run(debug=True)

Static Files:
    A web application often requires static files
    JavaScript file or CSS file supporting a web page
    Usually the web server is configured to serve them
    During the development these files are served from static folder in your package or next to your module
    Available at /static on the application
    A special endpoint 'static' used to generate URL for static files
        url_for('static',filename='style.css')
    app.static_url_path-can be used to specify a different path for the static files on the web. Defaults to the name of teh static_folder folder
    app.static_folder - the folder with the static files that should be served at static_url_path. Defaults to the 'static' folder in the root path of the application.

Request Object in Flask:
    Data from the client's web page is sent to server as a global request object
    In order to process request data, it should be imported from Flask module.
    Important attributes of request object:
        -Form: A MultiDict with the parsed form data from POST or PUT requests
        -args: A MultiDict with the parsed contents of the query
        -string: The part in the URL after the question mark
        -values: A CombinedMultiDict with the contents of both forms and args
        -cookies: A dict with the contents of all cookies transmitted with the request.
        -headers: The incoming request headers as a dictionary like object
        -data: Contains the incoming request data as string in case it came with a mimetype Flask does not handle
        -files: MultiDict with files uploaded as FileStorage object. Behaves like a standard file object you know from python
            Also has a save() function the can store the file ont he filesystem
        -environ: The underlying WSGI environment
        -method: The current request method (POST,GET etc.)
        -module: The name of the current module if the request was dispatched to a actual module
        -routing_exception: NONE: if matching the URL failed, this is the exception that will be raised as part of the request handling. This usually a NotFound exception or something similar.

Request.form object in Flask
    Html form data is submitted by POST method
    Function bound to URL receives form data in request.form dictionary object
    This form object is forwarded to template for processing.
    eg : <form action = 'http://localhost:5000/result' method="POST">

        @app.route('/result',methods=['POST','GET'])
        def result():
            if request.method=='POST':
                result=request.form
                return render_template("table.html",result=result)

    eg: from flask import Flask, render_template, request
        app = Flask(__name__)
        @app.route('/')
        def student():
            return render_template('student.html')
        @app.route('/result',methods = ['POST','GET'])
        def result():
            if request.method == 'POST':
                result = request.form
                return render_template("result.html",result=result)
        if __name__=='__main__':
            app.run(debug = True)
key and value are put into a table <tr></tr>

Cookies in Flask
    A cookie is stored on client's computer as a text file.
    Its purpose is to remember and track data pertaining to client's usage for better visitor experience and site statistics.
    Request object contains a cookies attribute.
    It is a dictionary object of all cookie variables and corresponding values that client has transmitted.
    Cookie also stores its expiry time, path and domain name of site.
    In Flask, cookies are set on response object.
    Use make_response() function to get response object from value of a view function.
    Use set_cookie() function of response object to store a cookie.
    get() method of request.cookies attribute is used to read a cookie.
    eg:
       response.set_cookie(key,value)

       @app.route('/setcookie',methods=['POST','GET'])
       def setcookie():

            if request.method=='POST':
                user=request.form['nm']
                resp=make_response(render_template('readcookie.html'))
                resp.set_cookie('userID',user)
                return resp

       def get cookie('/getcookie)'
        name=request.cookies.get('UserID')
        return '<h1>welcome'+name+</h1>

Session Object In Flask
    unlike a cookie, session data is stored on server
    Session is a time interval between client logs into a server and it logs out of it
    Data which is needed to be held across this session is stored in a temporary directory on server
    Session with each client is assigned a Session ID
    Session data is stored on top of cookies and server signs them cryptographically.
    For this encryption, Flask application needs a SECRET_KEY defined
    Session object is also a dictionary object containing key-value pairs of session variables and associated values.

    - To set secret key
        app.secret_key =""
    -To set a session variable
        session(variable) = value
    -To release a session variable
        session.pop(variable,None)
    Flask will take the values you put into the session object and serialize them into a cookie
    If values do not persist across request, cookies are indeed enabled, and you are not getting a clear error message, check the size of the cookie in your page responses compared to the size supported by web browsers.

